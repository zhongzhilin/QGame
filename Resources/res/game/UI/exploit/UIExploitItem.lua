--region UIExploitItem.lua
--Author : yyt
--Date   : 2017/11/13
--generate by [ui_code_tool.py] automatically

local resMgr = global.resMgr
local uiMgr = global.uiMgr
local luaCfg = global.luaCfg
-- do not edit code in this region!!!!
--REQUIRE_CLASS_BEGIN
--REQUIRE_CLASS_END

local UIExploitItem  = class("UIExploitItem", function() return gdisplay.newWidget() end )
local UIItemTipsControl = require("game.UI.common.UIItemTipsControl")

function UIExploitItem:ctor()
    self:CreateUI()
end

function UIExploitItem:CreateUI()
    local root = resMgr:createWidget("exploit/exploit_shop_list")
    self:initUI(root)
end

function UIExploitItem:initUI(root)
    self.root = root
    self:addChild(root)
    ccui.Helper:doLayout(self.root)
    
    uiMgr:configUITree(self.root)
    uiMgr:configUILanguage(self.root, "exploit/exploit_shop_list")

-- do not edit code in this region!!!!
--EXPORT_NODE_BEGIN
    self.quit = self.root.Node_5.quit_export
    self.icon = self.root.Node_5.icon_export
    self.itemName = self.root.Node_5.itemName_export
    self.typeName = self.root.Node_5.typeName_export
    self.btn_2 = self.root.Node_5.btn_2_export
    self.grayBg = self.root.Node_5.btn_2_export.grayBg_export
    self.price = self.root.Node_5.btn_2_export.price_export

    uiMgr:addWidgetTouchHandler(self.btn_2, function(sender, eventType) self:buyHandler(sender, eventType) end, true)
--EXPORT_NODE_END
    self.btn_2:setSwallowTouches(false)
end

--if the funcion doesn't exists, it will insert a blank func
--CALLBACK_FUNCS_BEGIN
function UIExploitItem:setData(data)


    self.data = data
    local itemData = luaCfg:get_item_by(data.itemId)
    if not itemData then
        itemData = luaCfg:get_equipment_by(data.itemId)
    end
    global.panelMgr:setTextureForAsync(self.icon,itemData.itemIcon or itemData.icon, true)
    global.panelMgr:setTextureForAsync(self.quit,string.format("icon/item/item_bg_0%d.png",itemData.quality),true)
    self.itemName:setString(itemData.itemName or itemData.name)
    self.price:setString(data.cost)
    self.typeName:setString(luaCfg:get_local_string(10915, luaCfg:get_exploit_lv_by(data.type).exploitName))

    local exploitData = global.userData:getTagExploit()
    self.exploitData = exploitData

    global.colorUtils.turnGray(self.grayBg, false)
    if exploitData.lCurExploit < data.cost then
        global.colorUtils.turnGray(self.grayBg, true)
    end

    -- tips
    if not self.m_TipsControl  then 
        self.m_TipsControl = UIItemTipsControl.new()
        local tempdata ={information=itemData} 
        self.m_TipsControl:setdata(self.icon, tempdata, global.exploitPanel.tips_node)
    else 
        local tempdata ={information=itemData} 
        self.m_TipsControl:updateData(tempdata)
    end  
  
end

function UIExploitItem:onExit()
    if  self.m_TipsControl then 
        self.m_TipsControl:ClearEventListener()
        self.m_TipsControl  = nil 
    end 
end

function UIExploitItem:buyHandler(sender, eventType)
    
    local sPanel = global.panelMgr:getPanel("UIExploitPanel")
    if eventType == ccui.TouchEventType.began then
        sPanel.isPageMove = false
    end
    if eventType == ccui.TouchEventType.ended then
    
        if sPanel.isPageMove then 
            return
        end

        if self.exploitData.lLV > self.data.type then
            return global.tipsMgr:showWarning("exploit04", luaCfg:get_exploit_lv_by(self.data.type).exploitName)
        end

        -- 当前军工值不足
        if self.exploitData.lCurExploit < self.data.cost then
            return global.tipsMgr:showWarning("exploit03")
        end
        
        global.panelMgr:openPanel("UIExploitUsePanel"):setData(self.data)
    end

end
--CALLBACKS_FUNCS_END

return UIExploitItem

--endregion
