--region UIExploitPanel.lua
--Author : yyt
--Date   : 2017/11/13
--generate by [ui_code_tool.py] automatically

local resMgr = global.resMgr
local uiMgr = global.uiMgr
local luaCfg = global.luaCfg
-- do not edit code in this region!!!!
--REQUIRE_CLASS_BEGIN
local UIPortraitWidget = require("game.UI.union.widget.UIPortraitWidget")
--REQUIRE_CLASS_END

local UIExploitPanel  = class("UIExploitPanel", function() return gdisplay.newWidget() end )
local UITableView = require("game.UI.common.UITableView")
local UIExploitCell = require("game.UI.exploit.UIExploitCell")

function UIExploitPanel:ctor()
    self:CreateUI()
end

function UIExploitPanel:CreateUI()
    local root = resMgr:createWidget("exploit/exploit_shop")
    self:initUI(root)
end

function UIExploitPanel:initUI(root)
    self.root = root
    self:addChild(root)
    self.root:setContentSize(cc.size(gdisplay.width, gdisplay.height))
    ccui.Helper:doLayout(self.root)
    
    uiMgr:configUITree(self.root)
    uiMgr:configUILanguage(self.root, "exploit/exploit_shop")

-- do not edit code in this region!!!!
--EXPORT_NODE_BEGIN
    self.node_tableView = self.root.node_tableView_export
    self.portrait = UIPortraitWidget.new()
    uiMgr:configNestClass(self.portrait, self.root.topbj.portrait)
    self.offical = self.root.topbj.offical_mlan_7_export
    self.offiacalNode = self.root.topbj.offiacalNode_export
    self.nameOffical = self.root.topbj.offiacalNode_export.nameOffical_export
    self.receive = self.root.topbj.receive_export
    self.grayBg = self.root.topbj.receive_export.grayBg_export
    self.btn_king = self.root.topbj.btn_king_export
    self.kingIcon = self.root.topbj.btn_king_export.kingIcon_export
    self.txtKing = self.root.topbj.btn_king_export.txtKing_mlan_6_export
    self.title = self.root.title_export
    self.exploitIcon = self.root.exploitIcon_export
    self.now = self.root.now_mlan_13_export
    self.nownum = self.root.nownum_export
    self.tbSize = self.root.tbSize_export
    self.cellSize = self.root.cellSize_export
    self.topNode = self.root.topNode_export
    self.bottomNode = self.root.bottomNode_export
    self.introText = self.root.introText_export
    self.resetTime = self.root.resetTime_export
    self.resetTitle = self.root.resetTime_export.resetTitle_mlan_14_export

    uiMgr:addWidgetTouchHandler(self.receive, function(sender, eventType) self:receiveHandler(sender, eventType) end)
    uiMgr:addWidgetTouchHandler(self.btn_king, function(sender, eventType) self:kingHandler(sender, eventType) end)
    uiMgr:addWidgetTouchHandler(self.root.intro_btn, function(sender, eventType) self:info_click(sender, eventType) end)
--EXPORT_NODE_END

    uiMgr:addWidgetTouchHandler(self.title.esc, function(sender, eventType) self:exit_call(sender, eventType) end, nil, true)

    self.tableView = UITableView.new()
        :setSize(self.tbSize:getContentSize(), self.topNode, self.bottomNode)
        :setCellSize(self.cellSize:getContentSize())
        :setCellTemplate(UIExploitCell)
        :setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN)
        :setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL)
        :setColumn(3)
    self.node_tableView:addChild(self.tableView)

    self.offiacalNode:setLocalZOrder(1)
    global.exploitPanel = self

    self.tips_node = cc.Node:create()
    self:addChild(self.tips_node)
end

--if the funcion doesn't exists, it will insert a blank func
--CALLBACK_FUNCS_BEGIN

function UIExploitPanel:registerMove()

    local touchNode = cc.Node:create()
    self.root:addChild(touchNode)
    self.touchEventListener = cc.EventListenerTouchOneByOne:create()
    self.touchEventListener:setSwallowTouches(false)
    self.touchEventListener:registerScriptHandler(handler(self, self.onTouchBegan), cc.Handler.EVENT_TOUCH_BEGAN)
    self.touchEventListener:registerScriptHandler(handler(self, self.onTouchMoved), cc.Handler.EVENT_TOUCH_MOVED)
    self.touchEventListener:registerScriptHandler(handler(self, self.onTouchEnded), cc.Handler.EVENT_TOUCH_ENDED)
    cc.Director:getInstance():getEventDispatcher():addEventListenerWithSceneGraphPriority(self.touchEventListener, touchNode)
end

function UIExploitPanel:onExit(touch, event)
    if self.touchEventListener then
        cc.Director:getInstance():getEventDispatcher():removeEventListener(self.touchEventListener)
        self.touchEventListener = nil
    end

    if self.m_countDownTimer then
        gscheduler.unscheduleGlobal(self.m_countDownTimer)
        self.m_countDownTimer = nil
    end
end

local beganPos = cc.p(0,0)
local isMoved = false
function UIExploitPanel:onTouchBegan(touch, event)
    isMoved = false
    beganPos = touch:getLocation()
    return true
end
function UIExploitPanel:onTouchMoved(touch, event)
    isMoved = true
end

-- 手势误差处理
local ALLOW_MOVE_ERROR = 7.0/160.0
function UIExploitPanel:onTouchEnded(touch, event)
    if isMoved and self:convertDistanceFromPointToInch(cc.pGetDistance(beganPos, touch:getLocation())) > ALLOW_MOVE_ERROR then
        self.isPageMove = true
        return
    end
end

function UIExploitPanel:convertDistanceFromPointToInch(pointDis)
    local glview = cc.Director:getInstance():getOpenGLView()
    local  factor = (glview:getScaleX() + glview:getScaleY()) / 2
    return pointDis * factor / cc.Device:getDPI()
end

function UIExploitPanel:onEnter()

    self.isPageMove = false
    self:registerMove()
    
    self:addEventListener(global.gameEvent.EV_ON_UI_USER_UPDATE,function()
        if self.setData then
            self:setData(true)
        end
    end)

    self:setData()
end

function UIExploitPanel:setMaxExploitBuff()
    global.gmApi:effectBuffer({{lType = 9, lBind = 22}},function(msg)
        local maxExploit = 0
        local buffs = msg.tgEffect[1]
        for k,v in pairs(buffs.tgEffect) do
            if v.lEffectID == 53 then
                maxExploit = maxExploit + v.lVal
            end
        end
        if self.exploitData then 
            uiMgr:setRichText(self, "introText", 50228, {now=self.exploitData.lWeekExploit, max=self.exploitConfig.exploitnumMax, max2=maxExploit})
        end
    end)
end

function UIExploitPanel:setData(isNoReset)

    local headInfo = global.userheadframedata:getCrutFrame() or {}
    local headData = global.headData:getCurHead() or {}
    self.portrait:setData(headData.id or 108, headInfo.id or nil, {szCustomIco = global.headData:getSdefineHead()})

    local exploitData = global.userData:getTagExploit()
    local exploitConfig = luaCfg:get_exploit_lv_by(exploitData.lLV)
    self.exploitData = exploitData
    self.exploitConfig = exploitConfig
    if exploitConfig then
        self.nameOffical:setString(exploitConfig.exploitName)
        uiMgr:setRichText(self, "introText", 50228, {now=exploitData.lWeekExploit, max=exploitConfig.exploitnumMax})
        self.nownum:setString(exploitData.lCurExploit)
         self.nownum:setPositionX(self.now:getPositionX()+self.now:getContentSize().width)
        global.colorUtils.turnGray(self.grayBg, exploitData.lDailyGold == 1)
        self:setMaxExploitBuff()
    end

    local exploitShop = clone(luaCfg:exploit_shop())
    table.sort(exploitShop, function(s1, s2) return s1.array < s2.array end)
    self.tableView:setData(exploitShop, isNoReset)

    self:reSetTimeHandler()
    global.tools:adjustNodeVerical(self.resetTime, self.resetTitle)
end

function UIExploitPanel:reSetTimeHandler()
    self.lEndTime = global.dailyTaskData:getTimestamp().lExploitTime or 0
    self:cutTime()
end

function UIExploitPanel:cutTime()

    if not self.m_countDownTimer then
        self.m_countDownTimer = gscheduler.scheduleGlobal(handler(self,self.countDownHandler), 1)
    end
    self:countDownHandler()
end

function UIExploitPanel:countDownHandler(dt)
    if self.lEndTime <= 0 then
        self.resetTime:setString("00:00:00")
        return
    end
    local curr = global.dataMgr:getServerTime()
    local rest = self.lEndTime - curr
    if rest < 0 then
        if self.m_countDownTimer then
            gscheduler.unscheduleGlobal(self.m_countDownTimer)
            self.m_countDownTimer = nil
        end
        return
    end

    local dayNum = math.floor(rest/(24*3600))
    local str = ""
    if dayNum > 0 then
        str = string.format(global.luaCfg:get_local_string(10675),dayNum ,global.funcGame.formatTimeToHMS(rest-dayNum*24*3600)) 
    else
        str = global.funcGame.formatTimeToHMS(rest)
    end

    self.resetTime:setString(str)
end
                                           
function UIExploitPanel:receiveHandler(sender, eventType)
    
    if self.exploitData.lDailyGold == 1 then
        global.tipsMgr:showWarning("exploit02")
        return
    end

    global.itemApi:exploitAction(function (msg)
        global.panelMgr:openPanel("UIItemRewardPanel"):setData({{1, self.exploitConfig.DayGold}}) 
    end, 1)
end

function UIExploitPanel:kingHandler(sender, eventType)
    global.panelMgr:openPanel("UIExploitListPanel"):setData(self.exploitData)
end

function UIExploitPanel:exit_call(sender, eventType)
    global.panelMgr:closePanelForBtn("UIExploitPanel")
end

function UIExploitPanel:info_click(sender, eventType)
    local data = luaCfg:get_introduction_by(29)
    local infoPanel = global.panelMgr:openPanel("UIIntroducePanel")
    infoPanel:setData(data)
end
--CALLBACKS_FUNCS_END

return UIExploitPanel

--endregion
